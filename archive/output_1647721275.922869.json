{"content": {"suites": {"0": {"status": {"total_pass": 4, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 8, "total_error": 4}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_user_is_on_the_text_box_section", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_checking_full_name_field[ABCDEFGHIJKLMNOPQRSTUVWZYZ]", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_checking_full_name_field[abcdefghijklmnopqrstuvwzyz]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_checking_full_name_field[1234567890]", "rerun": "0"}, "4": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x0000000108a1c3c9 chromedriver + 5018569\n   1   chromedriver                        0x00000001089a7333 chromedriver + 4539187\n   2   chromedriver                        0x000000010857ca88 chromedriver + 170632\n   3   chromedriver                        0x00000001085b904b chromedriver + 417867\n   4   chromedriver                        0x00000001085dbf7f chromedriver + 561023\n   5   chromedriver                        0x00000001085ab823 chromedriver + 362531\n   6   chromedriver                        0x00000001085aae7b chromedriver + 360059\n   7   chromedriver                        0x00000001085ce7e2 chromedriver + 505826\n   8   chromedriver                        0x00000001085a5de5 chromedriver + 339429\n   9   chromedriver                        0x00000001085ce8ee chromedriver + 506094\n   10  chromedriver                        0x00000001085e1604 chromedriver + 583172\n   11  chromedriver                        0x00000001085ce6d3 chromedriver + 505555\n   12  chromedriver                        0x00000001085a495e chromedriver + 334174\n   13  chromedriver                        0x00000001085a5935 chromedriver + 338229\n   14  chromedriver                        0x00000001089d81ee chromedriver + 4739566\n   15  chromedriver                        0x00000001089f1f51 chromedriver + 4845393\n   16  chromedriver                        0x00000001089f7928 chromedriver + 4868392\n   17  chromedriver                        0x00000001089f2a7a chromedriver + 4848250\n   18  chromedriver                        0x00000001089ccc31 chromedriver + 4693041\n   19  chromedriver                        0x0000000108a0d978 chromedriver + 4958584\n   20  chromedriver                        0x0000000108a0db01 chromedriver + 4958977\n   21  chromedriver                        0x0000000108a23795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_full_name_field[!@#$%^&*()_+-{}\"|:\"\\xb1\\xa7`,.<>?]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x000000010e3ac3c9 chromedriver + 5018569\n   1   chromedriver                        0x000000010e337333 chromedriver + 4539187\n   2   chromedriver                        0x000000010df0ca88 chromedriver + 170632\n   3   chromedriver                        0x000000010df4904b chromedriver + 417867\n   4   chromedriver                        0x000000010df6bf7f chromedriver + 561023\n   5   chromedriver                        0x000000010df3b823 chromedriver + 362531\n   6   chromedriver                        0x000000010df3ae7b chromedriver + 360059\n   7   chromedriver                        0x000000010df5e7e2 chromedriver + 505826\n   8   chromedriver                        0x000000010df35de5 chromedriver + 339429\n   9   chromedriver                        0x000000010df5e8ee chromedriver + 506094\n   10  chromedriver                        0x000000010df71604 chromedriver + 583172\n   11  chromedriver                        0x000000010df5e6d3 chromedriver + 505555\n   12  chromedriver                        0x000000010df3495e chromedriver + 334174\n   13  chromedriver                        0x000000010df35935 chromedriver + 338229\n   14  chromedriver                        0x000000010e3681ee chromedriver + 4739566\n   15  chromedriver                        0x000000010e381f51 chromedriver + 4845393\n   16  chromedriver                        0x000000010e387928 chromedriver + 4868392\n   17  chromedriver                        0x000000010e382a7a chromedriver + 4848250\n   18  chromedriver                        0x000000010e35cc31 chromedriver + 4693041\n   19  chromedriver                        0x000000010e39d978 chromedriver + 4958584\n   20  chromedriver                        0x000000010e39db01 chromedriver + 4958977\n   21  chromedriver                        0x000000010e3b3795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_email_field", "rerun": "0"}, "6": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x000000010106d3c9 chromedriver + 5018569\n   1   chromedriver                        0x0000000100ff8333 chromedriver + 4539187\n   2   chromedriver                        0x0000000100bcda88 chromedriver + 170632\n   3   chromedriver                        0x0000000100c0a04b chromedriver + 417867\n   4   chromedriver                        0x0000000100c2cf7f chromedriver + 561023\n   5   chromedriver                        0x0000000100bfc823 chromedriver + 362531\n   6   chromedriver                        0x0000000100bfbe7b chromedriver + 360059\n   7   chromedriver                        0x0000000100c1f7e2 chromedriver + 505826\n   8   chromedriver                        0x0000000100bf6de5 chromedriver + 339429\n   9   chromedriver                        0x0000000100c1f8ee chromedriver + 506094\n   10  chromedriver                        0x0000000100c32604 chromedriver + 583172\n   11  chromedriver                        0x0000000100c1f6d3 chromedriver + 505555\n   12  chromedriver                        0x0000000100bf595e chromedriver + 334174\n   13  chromedriver                        0x0000000100bf6935 chromedriver + 338229\n   14  chromedriver                        0x00000001010291ee chromedriver + 4739566\n   15  chromedriver                        0x0000000101042f51 chromedriver + 4845393\n   16  chromedriver                        0x0000000101048928 chromedriver + 4868392\n   17  chromedriver                        0x0000000101043a7a chromedriver + 4848250\n   18  chromedriver                        0x000000010101dc31 chromedriver + 4693041\n   19  chromedriver                        0x000000010105e978 chromedriver + 4958584\n   20  chromedriver                        0x000000010105eb01 chromedriver + 4958977\n   21  chromedriver                        0x0000000101074795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_current_address_field", "rerun": "0"}, "7": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x00000001046f63c9 chromedriver + 5018569\n   1   chromedriver                        0x0000000104681333 chromedriver + 4539187\n   2   chromedriver                        0x0000000104256a88 chromedriver + 170632\n   3   chromedriver                        0x000000010429304b chromedriver + 417867\n   4   chromedriver                        0x00000001042b5f7f chromedriver + 561023\n   5   chromedriver                        0x0000000104285823 chromedriver + 362531\n   6   chromedriver                        0x0000000104284e7b chromedriver + 360059\n   7   chromedriver                        0x00000001042a87e2 chromedriver + 505826\n   8   chromedriver                        0x000000010427fde5 chromedriver + 339429\n   9   chromedriver                        0x00000001042a88ee chromedriver + 506094\n   10  chromedriver                        0x00000001042bb604 chromedriver + 583172\n   11  chromedriver                        0x00000001042a86d3 chromedriver + 505555\n   12  chromedriver                        0x000000010427e95e chromedriver + 334174\n   13  chromedriver                        0x000000010427f935 chromedriver + 338229\n   14  chromedriver                        0x00000001046b21ee chromedriver + 4739566\n   15  chromedriver                        0x00000001046cbf51 chromedriver + 4845393\n   16  chromedriver                        0x00000001046d1928 chromedriver + 4868392\n   17  chromedriver                        0x00000001046cca7a chromedriver + 4848250\n   18  chromedriver                        0x00000001046a6c31 chromedriver + 4693041\n   19  chromedriver                        0x00000001046e7978 chromedriver + 4958584\n   20  chromedriver                        0x00000001046e7b01 chromedriver + 4958977\n   21  chromedriver                        0x00000001046fd795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_permanent_address_field", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture(scope='function')\n    def adding_fullname():\n        link = TestDataMainPage.ELEMENTS_PAGE_URL\n        page = ElementsPage(browser, link)\n        page.open_page(link)\n        # adding function for blocking advertisement if it is\n        page.removing_advertisement()\n        page.go_to_section(ElementPageLocators.TEXT_BOX_SECTION)\n>       page.entering_symbols_into_field(ElementPageLocators.FULL_NAME_FIELD, TestDataElementsPage.FULL_NAME)\n\nTests/tests_ElementsPage/conftest.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages/ElementsPage.py:27: in entering_symbols_into_field\n    email_field.send_keys(symbols)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:540: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1023eba30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Cannot construct KeyEvent from n...fff6fc93109 _pthread_start + 148\\\\n23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\nE         (Session info: headless chrome=99.0.4844.74)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001044043c9 chromedriver + 5018569\nE       1   chromedriver                        0x000000010438f333 chromedriver + 4539187\nE       2   chromedriver                        0x0000000103f64a88 chromedriver + 170632\nE       3   chromedriver                        0x0000000103fa104b chromedriver + 417867\nE       4   chromedriver                        0x0000000103fc3f7f chromedriver + 561023\nE       5   chromedriver                        0x0000000103f93823 chromedriver + 362531\nE       6   chromedriver                        0x0000000103f92e7b chromedriver + 360059\nE       7   chromedriver                        0x0000000103fb67e2 chromedriver + 505826\nE       8   chromedriver                        0x0000000103f8dde5 chromedriver + 339429\nE       9   chromedriver                        0x0000000103fb68ee chromedriver + 506094\nE       10  chromedriver                        0x0000000103fc9604 chromedriver + 583172\nE       11  chromedriver                        0x0000000103fb66d3 chromedriver + 505555\nE       12  chromedriver                        0x0000000103f8c95e chromedriver + 334174\nE       13  chromedriver                        0x0000000103f8d935 chromedriver + 338229\nE       14  chromedriver                        0x00000001043c01ee chromedriver + 4739566\nE       15  chromedriver                        0x00000001043d9f51 chromedriver + 4845393\nE       16  chromedriver                        0x00000001043df928 chromedriver + 4868392\nE       17  chromedriver                        0x00000001043daa7a chromedriver + 4848250\nE       18  chromedriver                        0x00000001043b4c31 chromedriver + 4693041\nE       19  chromedriver                        0x00000001043f5978 chromedriver + 4958584\nE       20  chromedriver                        0x00000001043f5b01 chromedriver + 4958977\nE       21  chromedriver                        0x000000010440b795 chromedriver + 5048213\nE       22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\nE       23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException\n", "test_name": "test_checking_disappearing_output_fullname_after_clearing_email_field", "rerun": "0"}, "9": {"status": "ERROR", "message": "@pytest.fixture(scope='function')\n    def adding_email():\n        link = TestDataMainPage.ELEMENTS_PAGE_URL\n        page = ElementsPage(browser, link)\n        page.open_page(link)\n        # adding function for blocking advertisement if it is\n        page.removing_advertisement()\n        page.go_to_section(ElementPageLocators.TEXT_BOX_SECTION)\n>       page.entering_symbols_into_field(ElementPageLocators.EMAIL, TestDataElementsPage.EMAIL_POSITIVE)\n\nTests/tests_ElementsPage/conftest.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages/ElementsPage.py:27: in entering_symbols_into_field\n    email_field.send_keys(symbols)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:540: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10228b3d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Cannot construct KeyEvent from n...fff6fc93109 _pthread_start + 148\\\\n23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\nE         (Session info: headless chrome=99.0.4844.74)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100b313c9 chromedriver + 5018569\nE       1   chromedriver                        0x0000000100abc333 chromedriver + 4539187\nE       2   chromedriver                        0x0000000100691a88 chromedriver + 170632\nE       3   chromedriver                        0x00000001006ce04b chromedriver + 417867\nE       4   chromedriver                        0x00000001006f0f7f chromedriver + 561023\nE       5   chromedriver                        0x00000001006c0823 chromedriver + 362531\nE       6   chromedriver                        0x00000001006bfe7b chromedriver + 360059\nE       7   chromedriver                        0x00000001006e37e2 chromedriver + 505826\nE       8   chromedriver                        0x00000001006bade5 chromedriver + 339429\nE       9   chromedriver                        0x00000001006e38ee chromedriver + 506094\nE       10  chromedriver                        0x00000001006f6604 chromedriver + 583172\nE       11  chromedriver                        0x00000001006e36d3 chromedriver + 505555\nE       12  chromedriver                        0x00000001006b995e chromedriver + 334174\nE       13  chromedriver                        0x00000001006ba935 chromedriver + 338229\nE       14  chromedriver                        0x0000000100aed1ee chromedriver + 4739566\nE       15  chromedriver                        0x0000000100b06f51 chromedriver + 4845393\nE       16  chromedriver                        0x0000000100b0c928 chromedriver + 4868392\nE       17  chromedriver                        0x0000000100b07a7a chromedriver + 4848250\nE       18  chromedriver                        0x0000000100ae1c31 chromedriver + 4693041\nE       19  chromedriver                        0x0000000100b22978 chromedriver + 4958584\nE       20  chromedriver                        0x0000000100b22b01 chromedriver + 4958977\nE       21  chromedriver                        0x0000000100b38795 chromedriver + 5048213\nE       22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\nE       23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException\n", "test_name": "test_checking_disappearing_output_email_after_clearing_email_field", "rerun": "0"}, "10": {"status": "ERROR", "message": "@pytest.fixture(scope='function')\n    def adding_current_address():\n        link = TestDataMainPage.ELEMENTS_PAGE_URL\n        page = ElementsPage(browser, link)\n        page.open_page(link)\n        # adding function for blocking advertisement if it is\n        page.removing_advertisement()\n        page.go_to_section(ElementPageLocators.TEXT_BOX_SECTION)\n>       page.entering_symbols_into_field(ElementPageLocators.CURRENT_ADDRESS, TestDataElementsPage.CURRENT_ADDRESS)\n\nTests/tests_ElementsPage/conftest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages/ElementsPage.py:27: in entering_symbols_into_field\n    email_field.send_keys(symbols)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:540: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10235dcc0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Cannot construct KeyEvent from n...fff6fc93109 _pthread_start + 148\\\\n23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\nE         (Session info: headless chrome=99.0.4844.74)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001062913c9 chromedriver + 5018569\nE       1   chromedriver                        0x000000010621c333 chromedriver + 4539187\nE       2   chromedriver                        0x0000000105df1a88 chromedriver + 170632\nE       3   chromedriver                        0x0000000105e2e04b chromedriver + 417867\nE       4   chromedriver                        0x0000000105e50f7f chromedriver + 561023\nE       5   chromedriver                        0x0000000105e20823 chromedriver + 362531\nE       6   chromedriver                        0x0000000105e1fe7b chromedriver + 360059\nE       7   chromedriver                        0x0000000105e437e2 chromedriver + 505826\nE       8   chromedriver                        0x0000000105e1ade5 chromedriver + 339429\nE       9   chromedriver                        0x0000000105e438ee chromedriver + 506094\nE       10  chromedriver                        0x0000000105e56604 chromedriver + 583172\nE       11  chromedriver                        0x0000000105e436d3 chromedriver + 505555\nE       12  chromedriver                        0x0000000105e1995e chromedriver + 334174\nE       13  chromedriver                        0x0000000105e1a935 chromedriver + 338229\nE       14  chromedriver                        0x000000010624d1ee chromedriver + 4739566\nE       15  chromedriver                        0x0000000106266f51 chromedriver + 4845393\nE       16  chromedriver                        0x000000010626c928 chromedriver + 4868392\nE       17  chromedriver                        0x0000000106267a7a chromedriver + 4848250\nE       18  chromedriver                        0x0000000106241c31 chromedriver + 4693041\nE       19  chromedriver                        0x0000000106282978 chromedriver + 4958584\nE       20  chromedriver                        0x0000000106282b01 chromedriver + 4958977\nE       21  chromedriver                        0x0000000106298795 chromedriver + 5048213\nE       22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\nE       23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException\n", "test_name": "test_checking_disappearing_output_current_address_after_clearing_field", "rerun": "0"}, "11": {"status": "ERROR", "message": "@pytest.fixture(scope='function')\n    def adding_permanent_address():\n        link = TestDataMainPage.ELEMENTS_PAGE_URL\n        page = ElementsPage(browser, link)\n        page.open_page(link)\n        # adding function for blocking advertisement if it is\n        page.removing_advertisement()\n        page.go_to_section(ElementPageLocators.TEXT_BOX_SECTION)\n>       page.entering_symbols_into_field(ElementPageLocators.PERMANENT_ADDRESS, TestDataElementsPage.PERMANENT_ADDRESS)\n\nTests/tests_ElementsPage/conftest.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages/ElementsPage.py:27: in entering_symbols_into_field\n    email_field.send_keys(symbols)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:540: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102c253f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Cannot construct KeyEvent from n...fff6fc93109 _pthread_start + 148\\\\n23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\nE         (Session info: headless chrome=99.0.4844.74)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010903c3c9 chromedriver + 5018569\nE       1   chromedriver                        0x0000000108fc7333 chromedriver + 4539187\nE       2   chromedriver                        0x0000000108b9ca88 chromedriver + 170632\nE       3   chromedriver                        0x0000000108bd904b chromedriver + 417867\nE       4   chromedriver                        0x0000000108bfbf7f chromedriver + 561023\nE       5   chromedriver                        0x0000000108bcb823 chromedriver + 362531\nE       6   chromedriver                        0x0000000108bcae7b chromedriver + 360059\nE       7   chromedriver                        0x0000000108bee7e2 chromedriver + 505826\nE       8   chromedriver                        0x0000000108bc5de5 chromedriver + 339429\nE       9   chromedriver                        0x0000000108bee8ee chromedriver + 506094\nE       10  chromedriver                        0x0000000108c01604 chromedriver + 583172\nE       11  chromedriver                        0x0000000108bee6d3 chromedriver + 505555\nE       12  chromedriver                        0x0000000108bc495e chromedriver + 334174\nE       13  chromedriver                        0x0000000108bc5935 chromedriver + 338229\nE       14  chromedriver                        0x0000000108ff81ee chromedriver + 4739566\nE       15  chromedriver                        0x0000000109011f51 chromedriver + 4845393\nE       16  chromedriver                        0x0000000109017928 chromedriver + 4868392\nE       17  chromedriver                        0x0000000109012a7a chromedriver + 4848250\nE       18  chromedriver                        0x0000000108fecc31 chromedriver + 4693041\nE       19  chromedriver                        0x000000010902d978 chromedriver + 4958584\nE       20  chromedriver                        0x000000010902db01 chromedriver + 4958977\nE       21  chromedriver                        0x0000000109043795 chromedriver + 5048213\nE       22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\nE       23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n\nvenv_aqa_practise/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException\n", "test_name": "test_checking_disappearing_output_permanent_address_after_clearing_field", "rerun": "0"}, "12": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x000000010325b3c9 chromedriver + 5018569\n   1   chromedriver                        0x00000001031e6333 chromedriver + 4539187\n   2   chromedriver                        0x0000000102dbba88 chromedriver + 170632\n   3   chromedriver                        0x0000000102df804b chromedriver + 417867\n   4   chromedriver                        0x0000000102e1af7f chromedriver + 561023\n   5   chromedriver                        0x0000000102dea823 chromedriver + 362531\n   6   chromedriver                        0x0000000102de9e7b chromedriver + 360059\n   7   chromedriver                        0x0000000102e0d7e2 chromedriver + 505826\n   8   chromedriver                        0x0000000102de4de5 chromedriver + 339429\n   9   chromedriver                        0x0000000102e0d8ee chromedriver + 506094\n   10  chromedriver                        0x0000000102e20604 chromedriver + 583172\n   11  chromedriver                        0x0000000102e0d6d3 chromedriver + 505555\n   12  chromedriver                        0x0000000102de395e chromedriver + 334174\n   13  chromedriver                        0x0000000102de4935 chromedriver + 338229\n   14  chromedriver                        0x00000001032171ee chromedriver + 4739566\n   15  chromedriver                        0x0000000103230f51 chromedriver + 4845393\n   16  chromedriver                        0x0000000103236928 chromedriver + 4868392\n   17  chromedriver                        0x0000000103231a7a chromedriver + 4848250\n   18  chromedriver                        0x000000010320bc31 chromedriver + 4693041\n   19  chromedriver                        0x000000010324c978 chromedriver + 4958584\n   20  chromedriver                        0x000000010324cb01 chromedriver + 4958977\n   21  chromedriver                        0x0000000103262795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_email_field[@mail.com]", "rerun": "0"}, "13": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x0000000102e353c9 chromedriver + 5018569\n   1   chromedriver                        0x0000000102dc0333 chromedriver + 4539187\n   2   chromedriver                        0x0000000102995a88 chromedriver + 170632\n   3   chromedriver                        0x00000001029d204b chromedriver + 417867\n   4   chromedriver                        0x00000001029f4f7f chromedriver + 561023\n   5   chromedriver                        0x00000001029c4823 chromedriver + 362531\n   6   chromedriver                        0x00000001029c3e7b chromedriver + 360059\n   7   chromedriver                        0x00000001029e77e2 chromedriver + 505826\n   8   chromedriver                        0x00000001029bede5 chromedriver + 339429\n   9   chromedriver                        0x00000001029e78ee chromedriver + 506094\n   10  chromedriver                        0x00000001029fa604 chromedriver + 583172\n   11  chromedriver                        0x00000001029e76d3 chromedriver + 505555\n   12  chromedriver                        0x00000001029bd95e chromedriver + 334174\n   13  chromedriver                        0x00000001029be935 chromedriver + 338229\n   14  chromedriver                        0x0000000102df11ee chromedriver + 4739566\n   15  chromedriver                        0x0000000102e0af51 chromedriver + 4845393\n   16  chromedriver                        0x0000000102e10928 chromedriver + 4868392\n   17  chromedriver                        0x0000000102e0ba7a chromedriver + 4848250\n   18  chromedriver                        0x0000000102de5c31 chromedriver + 4693041\n   19  chromedriver                        0x0000000102e26978 chromedriver + 4958584\n   20  chromedriver                        0x0000000102e26b01 chromedriver + 4958977\n   21  chromedriver                        0x0000000102e3c795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_email_field[123mail.com]", "rerun": "0"}, "14": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x000000010a5e73c9 chromedriver + 5018569\n   1   chromedriver                        0x000000010a572333 chromedriver + 4539187\n   2   chromedriver                        0x000000010a147a88 chromedriver + 170632\n   3   chromedriver                        0x000000010a18404b chromedriver + 417867\n   4   chromedriver                        0x000000010a1a6f7f chromedriver + 561023\n   5   chromedriver                        0x000000010a176823 chromedriver + 362531\n   6   chromedriver                        0x000000010a175e7b chromedriver + 360059\n   7   chromedriver                        0x000000010a1997e2 chromedriver + 505826\n   8   chromedriver                        0x000000010a170de5 chromedriver + 339429\n   9   chromedriver                        0x000000010a1998ee chromedriver + 506094\n   10  chromedriver                        0x000000010a1ac604 chromedriver + 583172\n   11  chromedriver                        0x000000010a1996d3 chromedriver + 505555\n   12  chromedriver                        0x000000010a16f95e chromedriver + 334174\n   13  chromedriver                        0x000000010a170935 chromedriver + 338229\n   14  chromedriver                        0x000000010a5a31ee chromedriver + 4739566\n   15  chromedriver                        0x000000010a5bcf51 chromedriver + 4845393\n   16  chromedriver                        0x000000010a5c2928 chromedriver + 4868392\n   17  chromedriver                        0x000000010a5bda7a chromedriver + 4848250\n   18  chromedriver                        0x000000010a597c31 chromedriver + 4693041\n   19  chromedriver                        0x000000010a5d8978 chromedriver + 4958584\n   20  chromedriver                        0x000000010a5d8b01 chromedriver + 4958977\n   21  chromedriver                        0x000000010a5ee795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_email_field[123@.com]", "rerun": "0"}, "15": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot construct KeyEvent from non-typeable key\n     (Session info: headless chrome=99.0.4844.74)\n   Stacktrace:\n   0   chromedriver                        0x0000000108dbe3c9 chromedriver + 5018569\n   1   chromedriver                        0x0000000108d49333 chromedriver + 4539187\n   2   chromedriver                        0x000000010891ea88 chromedriver + 170632\n   3   chromedriver                        0x000000010895b04b chromedriver + 417867\n   4   chromedriver                        0x000000010897df7f chromedriver + 561023\n   5   chromedriver                        0x000000010894d823 chromedriver + 362531\n   6   chromedriver                        0x000000010894ce7b chromedriver + 360059\n   7   chromedriver                        0x00000001089707e2 chromedriver + 505826\n   8   chromedriver                        0x0000000108947de5 chromedriver + 339429\n   9   chromedriver                        0x00000001089708ee chromedriver + 506094\n   10  chromedriver                        0x0000000108983604 chromedriver + 583172\n   11  chromedriver                        0x00000001089706d3 chromedriver + 505555\n   12  chromedriver                        0x000000010894695e chromedriver + 334174\n   13  chromedriver                        0x0000000108947935 chromedriver + 338229\n   14  chromedriver                        0x0000000108d7a1ee chromedriver + 4739566\n   15  chromedriver                        0x0000000108d93f51 chromedriver + 4845393\n   16  chromedriver                        0x0000000108d99928 chromedriver + 4868392\n   17  chromedriver                        0x0000000108d94a7a chromedriver + 4848250\n   18  chromedriver                        0x0000000108d6ec31 chromedriver + 4693041\n   19  chromedriver                        0x0000000108daf978 chromedriver + 4958584\n   20  chromedriver                        0x0000000108dafb01 chromedriver + 4958977\n   21  chromedriver                        0x0000000108dc5795 chromedriver + 5048213\n   22  libsystem_pthread.dylib             0x00007fff6fc93109 _pthread_start + 148\n   23  libsystem_pthread.dylib             0x00007fff6fc8eb8b thread_start + 15\n", "test_name": "test_checking_email_field[123@mail.c]", "rerun": "0"}}, "suite_name": "Tests/tests_ElementsPage/test_ElementsPage.py"}}}, "date": "March 19, 2022", "start_time": 1647720899.094398, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "4", "fail": "8", "skip": "0", "error": "4", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "16"}