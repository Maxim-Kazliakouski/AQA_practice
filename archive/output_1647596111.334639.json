{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'browser' for <Function test_partly_chosen_checkboxes>>\n\n    @pytest.fixture(scope='function')\n    def browser(request):\n        browser_name = request.config.getoption('browser.name')\n        headless = request.config.getoption('headmode')\n        print(f'\\nStarting browser {browser_name}...')\n        global browser\n        # user_language = request.config.getoption('language')\n        if browser_name == 'chrome':\n            # here we set in commandline choosing for headless mode\n            if headless == 'true':\n                options = webdriver.ChromeOptions()\n                # adding browser options!!! important\n                options.add_argument(\n                    \"user-data-dir=/Users/max_kazliakouski/Library/Application Support/Google/Chrome/Default\")\n                # prefs = {\"profile.default_content_setting_values.notifications\": 2}\n                # options.add_experimental_option(\"prefs\", prefs)\n                # options.add_argument(\"--disable-notifications\")\n                options.add_argument(\n                    \"user-agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36\")\n                options.headless = True\n                s = Service('Tools/chromedriver')\n                browser = webdriver.Chrome(service=s, options=options)\n                # params for docker\n                options = webdriver.ChromeOptions()\n                options.add_argument('--no-sandbox')\n                options.add_argument('--headless')\n                options.add_argument('--disable-gpu')\n                # s = Service('/usr/local/bin/chromedriver')\n                # browser = webdriver.Chrome(service=s, options=options)\n                browser.maximize_window()\n                browser.implicitly_wait(5)\n            else:\n                # options.add_experimental_option('prefs', {'intl.accept_languages': user_language})\n                options = webdriver.ChromeOptions()\n                options.add_argument(\n                    \"user-data-dir=/Users/max_kazliakouski/Library/Application Support/Google/Chrome/SeleniumProfile\")\n                # prefs = {\"profile.default_content_setting_values.notifications\": 2}\n                # options.add_experimental_option(\"prefs\", prefs)\n                # options.add_argument(\n                # \"user-agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36\")\n                options.headless = False\n                s = Service('Tools/chromedriver')\n                browser = webdriver.Chrome(service=s, options=options)\n                browser.maximize_window()\n                browser.implicitly_wait(5)\n        elif browser_name == 'mozila':\n            if headless == 'true':\n                options = webdriver.FirefoxOptions()\n                options.headless = True\n                s = Service('Tools/geckodriver')\n                browser = webdriver.Firefox(service=s, options=options)\n                # params for docker\n                options = webdriver.FirefoxOptions()\n                options.add_argument('--no-sandbox')\n                options.add_argument('--headless')\n                options.add_argument('--disable-gpu')\n                browser.maximize_window()\n                browser.implicitly_wait(5)\n            else:\n                options = webdriver.FirefoxOptions()\n                options.headless = False\n                s = Service('Tools/geckodriver')\n                browser = webdriver.Firefox(service=s, options=options)\n                browser.maximize_window()\n                browser.implicitly_wait(5)\n        elif browser_name == 'opera':\n            if headless == 'true':\n                options = webdriver.Opera\n                options.headless = True\n                # s = Service('Tools/operadriver')\n>               browser = webdriver.Opera(executable_path='/Volumes/Work/AQA_practice/Tools/operadriver', options=options)\n\nTests/tests_ElementsPage/conftest.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.9/site-packages/selenium/webdriver/opera/webdriver.py:70: in __init__\n    OperaDriver.__init__(self, executable_path=executable_path,\nvenv/lib/python3.9/site-packages/selenium/webdriver/opera/webdriver.py:46: in __init__\n    ChromiumDriver.__init__(self,\nvenv/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x109f31040>, browser_name = 'chrome'\nvendor_prefix = 'goog', port = 0, options = <class 'selenium.webdriver.opera.webdriver.WebDriver'>, service_args = None, desired_capabilities = None\nservice_log_path = None, service = <selenium.webdriver.chrome.service.Service object at 0x109f31100>, keep_alive = True\n\n    def __init__(self, browser_name, vendor_prefix,\n                 port=DEFAULT_PORT, options: BaseOptions = None, service_args=None,\n                 desired_capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 service: Service = None, keep_alive=DEFAULT_KEEP_ALIVE):\n        \"\"\"\n        Creates a new WebDriver instance of the ChromiumDriver.\n        Starts the service and then creates new WebDriver instance of ChromiumDriver.\n    \n        :Args:\n         - browser_name - Browser name used when matching capabilities.\n         - vendor_prefix - Company prefix to apply to vendor-specific WebDriver extension commands.\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromiumOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromiumRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn('desired_capabilities has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if port != DEFAULT_PORT:\n            warnings.warn('port has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        self.port = port\n        if service_log_path != DEFAULT_SERVICE_LOG_PATH:\n            warnings.warn('service_log_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if keep_alive != DEFAULT_KEEP_ALIVE and type(self) == __class__:\n            warnings.warn('keep_alive has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        else:\n            keep_alive = True\n    \n        self.vendor_prefix = vendor_prefix\n    \n        _ignore_proxy = None\n        if not options:\n            options = self.create_options()\n    \n        if desired_capabilities:\n            for key, value in desired_capabilities.items():\n                options.set_capability(key, value)\n    \n>       if options._ignore_local_proxy:\nE       AttributeError: type object 'WebDriver' has no attribute '_ignore_local_proxy'\n\nvenv/lib/python3.9/site-packages/selenium/webdriver/chromium/webdriver.py:83: AttributeError\n", "test_name": "test_partly_chosen_checkboxes", "rerun": "0"}}, "suite_name": "Tests/tests_ElementsPage/test_ElementsPage.py"}}}, "date": "March 18, 2022", "start_time": 1647596101.046036, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}